# coding: utf-8

"""
    Data Repository Service

     GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: ict@cmgg.be
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from drs_api.api_client import ApiClient


class DataRepositoryServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_object_ga4gh_drs_v1_objects_object_id_delete(self, object_id, **kwargs):  # noqa: E501
        """Delete a DrsObject  # noqa: E501

        Delete a ```DrsObject``` index entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_ga4gh_drs_v1_objects_object_id_delete(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_ga4gh_drs_v1_objects_object_id_delete_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_ga4gh_drs_v1_objects_object_id_delete_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def delete_object_ga4gh_drs_v1_objects_object_id_delete_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """Delete a DrsObject  # noqa: E501

        Delete a ```DrsObject``` index entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_ga4gh_drs_v1_objects_object_id_delete_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object_ga4gh_drs_v1_objects_object_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `delete_object_ga4gh_drs_v1_objects_object_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['object_id'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects/{object_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_alias_ga4gh_drs_v1_objects_get(self, alias, **kwargs):  # noqa: E501
        """Query DrsObjects on alias  # noqa: E501

        Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_alias_ga4gh_drs_v1_objects_get(alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] alias: The alias(ses) on which to query DrsObjects (regex compatible) (required)
        :return: list[DrsObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_alias_ga4gh_drs_v1_objects_get_with_http_info(alias, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_alias_ga4gh_drs_v1_objects_get_with_http_info(alias, **kwargs)  # noqa: E501
            return data

    def get_object_alias_ga4gh_drs_v1_objects_get_with_http_info(self, alias, **kwargs):  # noqa: E501
        """Query DrsObjects on alias  # noqa: E501

        Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_alias_ga4gh_drs_v1_objects_get_with_http_info(alias, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] alias: The alias(ses) on which to query DrsObjects (regex compatible) (required)
        :return: list[DrsObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_alias_ga4gh_drs_v1_objects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `get_object_alias_ga4gh_drs_v1_objects_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
            collection_formats['alias'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DrsObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get(self, object_id, access_id, **kwargs):  # noqa: E501
        """Get a URL for fetching bytes  # noqa: E501

        Returns a URL that can be used to fetch the bytes of a `DrsObject`.                     This method only needs to be called when using an `AccessMethod` that contains an `access_id`                     (e.g., for servers that use signed URLs for fetching object bytes).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get(object_id, access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: ```DrsObject``` identifier (required)
        :param str access_id: An `access_id` from the `access_methods` list of a `DrsObject` (required)
        :return: AccessURL
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get_with_http_info(object_id, access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get_with_http_info(object_id, access_id, **kwargs)  # noqa: E501
            return data

    def get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get_with_http_info(self, object_id, access_id, **kwargs):  # noqa: E501
        """Get a URL for fetching bytes  # noqa: E501

        Returns a URL that can be used to fetch the bytes of a `DrsObject`.                     This method only needs to be called when using an `AccessMethod` that contains an `access_id`                     (e.g., for servers that use signed URLs for fetching object bytes).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get_with_http_info(object_id, access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: ```DrsObject``` identifier (required)
        :param str access_id: An `access_id` from the `access_methods` list of a `DrsObject` (required)
        :return: AccessURL
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'access_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get`")  # noqa: E501
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_object_ga4gh_drs_v1_objects_object_id_access_access_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['object_id'] = params['object_id']  # noqa: E501
        if 'access_id' in params:
            path_params['access_id'] = params['access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects/{object_id}/access/{access_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessURL',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_ga4gh_drs_v1_objects_object_id_get(self, object_id, expand, **kwargs):  # noqa: E501
        """Retrieve a DrsObject  # noqa: E501

        Returns object metadata, and a list of access methods that can be used to fetch object bytes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_ga4gh_drs_v1_objects_object_id_get(object_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: ```DrsObject``` identifier (required)
        :param bool expand: If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
        :return: DrsObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_ga4gh_drs_v1_objects_object_id_get_with_http_info(object_id, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_ga4gh_drs_v1_objects_object_id_get_with_http_info(object_id, expand, **kwargs)  # noqa: E501
            return data

    def get_object_ga4gh_drs_v1_objects_object_id_get_with_http_info(self, object_id, expand, **kwargs):  # noqa: E501
        """Retrieve a DrsObject  # noqa: E501

        Returns object metadata, and a list of access methods that can be used to fetch object bytes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_ga4gh_drs_v1_objects_object_id_get_with_http_info(object_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id: ```DrsObject``` identifier (required)
        :param bool expand: If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
        :return: DrsObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_ga4gh_drs_v1_objects_object_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_object_ga4gh_drs_v1_objects_object_id_get`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if ('expand' not in params or
                params['expand'] is None):
            raise ValueError("Missing the required parameter `expand` when calling `get_object_ga4gh_drs_v1_objects_object_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['object_id'] = params['object_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects/{object_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DrsObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_object_ga4gh_drs_v1_objects_post(self, body, **kwargs):  # noqa: E501
        """Create a new DrsObject  # noqa: E501

        POST a requested ID to create an object that corresponds to this ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_object_ga4gh_drs_v1_objects_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DrsObject body: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_object_ga4gh_drs_v1_objects_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_object_ga4gh_drs_v1_objects_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_object_ga4gh_drs_v1_objects_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new DrsObject  # noqa: E501

        POST a requested ID to create an object that corresponds to this ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_object_ga4gh_drs_v1_objects_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DrsObject body: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_object_ga4gh_drs_v1_objects_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_object_ga4gh_drs_v1_objects_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_object_ga4gh_drs_v1_objects_object_id_put(self, body, object_id, **kwargs):  # noqa: E501
        """Update a DrsObject  # noqa: E501

        Update the ```DrsObject```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_object_ga4gh_drs_v1_objects_object_id_put(body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DrsObject body: (required)
        :param str object_id: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_object_ga4gh_drs_v1_objects_object_id_put_with_http_info(body, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_object_ga4gh_drs_v1_objects_object_id_put_with_http_info(body, object_id, **kwargs)  # noqa: E501
            return data

    def put_object_ga4gh_drs_v1_objects_object_id_put_with_http_info(self, body, object_id, **kwargs):  # noqa: E501
        """Update a DrsObject  # noqa: E501

        Update the ```DrsObject```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_object_ga4gh_drs_v1_objects_object_id_put_with_http_info(body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DrsObject body: (required)
        :param str object_id: (required)
        :return: BasicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_object_ga4gh_drs_v1_objects_object_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_object_ga4gh_drs_v1_objects_object_id_put`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `put_object_ga4gh_drs_v1_objects_object_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_id' in params:
            path_params['object_id'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/ga4gh/drs/v1/objects/{object_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
