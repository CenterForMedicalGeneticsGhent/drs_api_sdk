# coding: utf-8

"""
    Data Repository Service

     GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: ict@cmgg.be
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentsExpanded(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'drs_uri': 'list[str]',
        'contents': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'drs_uri': 'drs_uri',
        'contents': 'contents'
    }

    def __init__(self, name=None, id=None, drs_uri=None, contents=None):  # noqa: E501
        """ContentsExpanded - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._drs_uri = None
        self._contents = None
        self.discriminator = None
        self.name = name
        if id is not None:
            self.id = id
        if drs_uri is not None:
            self.drs_uri = drs_uri
        if contents is not None:
            self.contents = contents

    @property
    def name(self):
        """Gets the name of this ContentsExpanded.  # noqa: E501

        A name declared by the bundle author that must be used when materialising this object,         overriding any name directly associated with the object itself.         The name must be unique with the containing bundle.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].  # noqa: E501

        :return: The name of this ContentsExpanded.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentsExpanded.

        A name declared by the bundle author that must be used when materialising this object,         overriding any name directly associated with the object itself.         The name must be unique with the containing bundle.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].  # noqa: E501

        :param name: The name of this ContentsExpanded.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this ContentsExpanded.  # noqa: E501

        A DRS identifier of a ```DrsObject``` (either a single blob or a nested bundle).         If this ```ContentsObject``` is an object within a nested bundle, then the id is optional.         Otherwise, the id is required.  # noqa: E501

        :return: The id of this ContentsExpanded.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentsExpanded.

        A DRS identifier of a ```DrsObject``` (either a single blob or a nested bundle).         If this ```ContentsObject``` is an object within a nested bundle, then the id is optional.         Otherwise, the id is required.  # noqa: E501

        :param id: The id of this ContentsExpanded.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def drs_uri(self):
        """Gets the drs_uri of this ContentsExpanded.  # noqa: E501

        A list of full DRS identifier URI paths that may be used to obtain the object.         These URIs may be external to this DRS instance.  # noqa: E501

        :return: The drs_uri of this ContentsExpanded.  # noqa: E501
        :rtype: list[str]
        """
        return self._drs_uri

    @drs_uri.setter
    def drs_uri(self, drs_uri):
        """Sets the drs_uri of this ContentsExpanded.

        A list of full DRS identifier URI paths that may be used to obtain the object.         These URIs may be external to this DRS instance.  # noqa: E501

        :param drs_uri: The drs_uri of this ContentsExpanded.  # noqa: E501
        :type: list[str]
        """

        self._drs_uri = drs_uri

    @property
    def contents(self):
        """Gets the contents of this ContentsExpanded.  # noqa: E501

        If this ContentsObject describes a nested bundle and the caller specified \"?expand=true\" on the request,         then this contents array must be present and describe the objects within the nested bundle.  # noqa: E501

        :return: The contents of this ContentsExpanded.  # noqa: E501
        :rtype: list[str]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this ContentsExpanded.

        If this ContentsObject describes a nested bundle and the caller specified \"?expand=true\" on the request,         then this contents array must be present and describe the objects within the nested bundle.  # noqa: E501

        :param contents: The contents of this ContentsExpanded.  # noqa: E501
        :type: list[str]
        """

        self._contents = contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentsExpanded, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentsExpanded):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
