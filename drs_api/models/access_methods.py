# coding: utf-8

"""
    Data Repository Service

     GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: ict@cmgg.be
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessMethods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'access_url': 'AccessURL',
        'access_id': 'str',
        'region': 'str'
    }

    attribute_map = {
        'type': 'type',
        'access_url': 'access_url',
        'access_id': 'access_id',
        'region': 'region'
    }

    def __init__(self, type=None, access_url=None, access_id=None, region=None):  # noqa: E501
        """AccessMethods - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._access_url = None
        self._access_id = None
        self._region = None
        self.discriminator = None
        self.type = type
        if access_url is not None:
            self.access_url = access_url
        if access_id is not None:
            self.access_id = access_id
        if region is not None:
            self.region = region

    @property
    def type(self):
        """Gets the type of this AccessMethods.  # noqa: E501

        Enum: ```\"s3\"``` ```\"gs\"``` ```\"ftp\"``` ```\"gsiftp\"``` ```\"globus\"```         ```\"htsget\"``` ```\"https\"``` ```\"file\"``` Type of the access method.  # noqa: E501

        :return: The type of this AccessMethods.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccessMethods.

        Enum: ```\"s3\"``` ```\"gs\"``` ```\"ftp\"``` ```\"gsiftp\"``` ```\"globus\"```         ```\"htsget\"``` ```\"https\"``` ```\"file\"``` Type of the access method.  # noqa: E501

        :param type: The type of this AccessMethods.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def access_url(self):
        """Gets the access_url of this AccessMethods.  # noqa: E501


        :return: The access_url of this AccessMethods.  # noqa: E501
        :rtype: AccessURL
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this AccessMethods.


        :param access_url: The access_url of this AccessMethods.  # noqa: E501
        :type: AccessURL
        """

        self._access_url = access_url

    @property
    def access_id(self):
        """Gets the access_id of this AccessMethods.  # noqa: E501

        An arbitrary string to be passed to the ```/access``` method to get an ```AccessURL```.         This string must be unique within the scope of a single object. Note that at least one         of ```access_url``` and ```access_id``` must be provided.  # noqa: E501

        :return: The access_id of this AccessMethods.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this AccessMethods.

        An arbitrary string to be passed to the ```/access``` method to get an ```AccessURL```.         This string must be unique within the scope of a single object. Note that at least one         of ```access_url``` and ```access_id``` must be provided.  # noqa: E501

        :param access_id: The access_id of this AccessMethods.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def region(self):
        """Gets the region of this AccessMethods.  # noqa: E501

        Name of the region in the cloud service provider that the object belongs to.  # noqa: E501

        :return: The region of this AccessMethods.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AccessMethods.

        Name of the region in the cloud service provider that the object belongs to.  # noqa: E501

        :param region: The region of this AccessMethods.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessMethods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
