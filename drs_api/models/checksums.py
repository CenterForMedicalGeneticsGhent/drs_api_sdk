# coding: utf-8

"""
    Data Repository Service

     GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: ict@cmgg.be
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Checksums(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checksum': 'str',
        'type': 'str'
    }

    attribute_map = {
        'checksum': 'checksum',
        'type': 'type'
    }

    def __init__(self, checksum=None, type=None):  # noqa: E501
        """Checksums - a model defined in Swagger"""  # noqa: E501
        self._checksum = None
        self._type = None
        self.discriminator = None
        self.checksum = checksum
        self.type = type

    @property
    def checksum(self):
        """Gets the checksum of this Checksums.  # noqa: E501

        The hex-string encoded checksum for the data  # noqa: E501

        :return: The checksum of this Checksums.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Checksums.

        The hex-string encoded checksum for the data  # noqa: E501

        :param checksum: The checksum of this Checksums.  # noqa: E501
        :type: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")  # noqa: E501

        self._checksum = checksum

    @property
    def type(self):
        """Gets the type of this Checksums.  # noqa: E501

        The digest method used to create the checksum. The         value (e.g. ```sha-256```) SHOULD be listed as ```Hash Name String``` in the         https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry].         Other values MAY be used, as long as implementors are aware of the issues         discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].         GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.         Until then, if implementors do choose such an algorithm (e.g. because it's implemented by their storage provider),         they SHOULD use an existing standard ```type``` value such as ```md5```, ```etag```, ```crc32c```, ```trunc512```, or ```sha1```.  # noqa: E501

        :return: The type of this Checksums.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Checksums.

        The digest method used to create the checksum. The         value (e.g. ```sha-256```) SHOULD be listed as ```Hash Name String``` in the         https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry].         Other values MAY be used, as long as implementors are aware of the issues         discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].         GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.         Until then, if implementors do choose such an algorithm (e.g. because it's implemented by their storage provider),         they SHOULD use an existing standard ```type``` value such as ```md5```, ```etag```, ```crc32c```, ```trunc512```, or ```sha1```.  # noqa: E501

        :param type: The type of this Checksums.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Checksums, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Checksums):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
