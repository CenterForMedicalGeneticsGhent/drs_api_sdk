{
    "openapi": "3.0.2",
    "info": {
        "title": "Data Repository Service",
        "description": "\nGET request: \n- Fetch a DrsObject from the database by sending a unique ID through the request\n- Fetch an access url to the data which the object refers to\n- Fetch DrsObjects by doing a search on the aliases\n\nPOST request: \n- Create a non-existing DrsObject in the database by giving an identifier\n\nDELETE request: \n- Delete a DrsObject from the database by unique identifier\n\nPUT request: \n- Update an existing DrsObject by unique identifier and the changes in the body\n",
        "termsOfService": "https://www.ga4gh.org/terms-and-conditions/",
        "contact": {
            "name": "ICT CMGG",
            "email": "ict@cmgg.be"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://raw.githubusercontent.com/ga4gh/data-repository-service-schemas/master/LICENSE"
        },
        "version": "1.2.0"
    },
    "paths": {
        "/ga4gh/drs/v1/objects/{object_id}": {
            "get": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Retrieve a DrsObject",
                "description": "Returns object metadata, and a list of access methods that can be used to fetch object bytes.",
                "operationId": "get_object_ga4gh_drs_v1_objects__object_id__get",
                "parameters": [
                    {
                        "description": "```DrsObject``` identifier",
                        "required": true,
                        "schema": {
                            "title": "Object Id",
                            "type": "string",
                            "description": "```DrsObject``` identifier"
                        },
                        "name": "object_id",
                        "in": "path"
                    },
                    {
                        "description": "If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored.",
                        "required": true,
                        "schema": {
                            "title": "Expand",
                            "type": "boolean",
                            "description": "If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored."
                        },
                        "example": false,
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ```DrsObject``` was found succesfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrsObject"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Update a DrsObject",
                "description": "Update the ```DrsObject```",
                "operationId": "put_object_ga4gh_drs_v1_objects__object_id__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Object Id",
                            "type": "string"
                        },
                        "name": "object_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DrsObject"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The ```DrsObject``` was succesfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicResponse"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Delete a DrsObject",
                "description": "Delete a ```DrsObject``` index entry",
                "operationId": "delete_object_ga4gh_drs_v1_objects__object_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Object Id",
                            "type": "string"
                        },
                        "name": "object_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ```DrsObject``` was succesfully deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicResponse"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/ga4gh/drs/v1/objects/{object_id}/access/{access_id}": {
            "get": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Get a URL for fetching bytes",
                "description": "Returns a URL that can be used to fetch the bytes of a `DrsObject`.                     This method only needs to be called when using an `AccessMethod` that contains an `access_id`                     (e.g., for servers that use signed URLs for fetching object bytes).",
                "operationId": "get_object_ga4gh_drs_v1_objects__object_id__access__access_id__get",
                "parameters": [
                    {
                        "description": "```DrsObject``` identifier",
                        "required": true,
                        "schema": {
                            "title": "Object Id",
                            "type": "string",
                            "description": "```DrsObject``` identifier"
                        },
                        "name": "object_id",
                        "in": "path"
                    },
                    {
                        "description": "An `access_id` from the `access_methods` list of a `DrsObject`",
                        "required": true,
                        "schema": {
                            "title": "Access Id",
                            "type": "string",
                            "description": "An `access_id` from the `access_methods` list of a `DrsObject`"
                        },
                        "name": "access_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ```AccessURL``` was found succesfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessURL"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/ga4gh/drs/v1/objects": {
            "get": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Query DrsObjects on alias",
                "description": "Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.",
                "operationId": "get_object_alias_ga4gh_drs_v1_objects_get",
                "parameters": [
                    {
                        "description": "The alias(ses) on which to query DrsObjects (regex compatible)",
                        "required": true,
                        "schema": {
                            "title": "Alias",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "The alias(ses) on which to query DrsObjects (regex compatible)"
                        },
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ```DrsObject```s were found succesfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Object Alias Ga4Gh Drs V1 Objects Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DrsObject"
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Data Repository Service"
                ],
                "summary": "Create a new DrsObject",
                "description": "POST a requested ID to create an object that corresponds to this ID",
                "operationId": "post_object_ga4gh_drs_v1_objects_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DrsObject"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The ```DrsObject``` was succesfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicResponse"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The operation is delayed and will continue asynchronously.                             The client should retry this same request after the delay specified by Retry-After header."
                    },
                    "400": {
                        "description": "The request is malformed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The request is unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The requester is not authorized to perform this action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The requested `DrsObject` wasnâ€™t found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Wrong username or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "This object already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "This query returns more than 20 objects, please specify the alias a bit more.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "421": {
                        "description": "The server corresponding to the S3 URL does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "An unexpected error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/token": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Login",
                "operationId": "login_token_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_token_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Check if the API is running correctly",
                "description": "Health check for the API",
                "operationId": "get_health_health_get",
                "responses": {
                    "200": {
                        "description": "The API is healthy!",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessMethods": {
                "title": "AccessMethods",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "title": "Type",
                        "type": "string",
                        "description": "Enum: ```\"s3\"``` ```\"gs\"``` ```\"ftp\"``` ```\"gsiftp\"``` ```\"globus\"```         ```\"htsget\"``` ```\"https\"``` ```\"file\"``` Type of the access method."
                    },
                    "access_url": {
                        "$ref": "#/components/schemas/AccessURL"
                    },
                    "access_id": {
                        "title": "Access Id",
                        "type": "string",
                        "description": "An arbitrary string to be passed to the ```/access``` method to get an ```AccessURL```.         This string must be unique within the scope of a single object. Note that at least one         of ```access_url``` and ```access_id``` must be provided."
                    },
                    "region": {
                        "title": "Region",
                        "type": "string",
                        "description": "Name of the region in the cloud service provider that the object belongs to."
                    }
                }
            },
            "AccessURL": {
                "title": "AccessURL",
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "description": "A fully resolvable URL that can be used to fetch the actual object bytes."
                    },
                    "headers": {
                        "title": "Headers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of headers to include in the HTTP request to ```url```.         These headers can be used to provide auth tokens required to fetch the object bytes.",
                        "default": []
                    }
                }
            },
            "BasicResponse": {
                "title": "BasicResponse",
                "required": [
                    "object_id"
                ],
                "type": "object",
                "properties": {
                    "object_id": {
                        "title": "Object Id",
                        "type": "string",
                        "description": "The ID of the created Data Object",
                        "example": "string"
                    }
                }
            },
            "Body_login_token_post": {
                "title": "Body_login_token_post",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "grant_type": {
                        "title": "Grant Type",
                        "pattern": "password",
                        "type": "string"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string"
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "string",
                        "default": ""
                    },
                    "client_id": {
                        "title": "Client Id",
                        "type": "string"
                    },
                    "client_secret": {
                        "title": "Client Secret",
                        "type": "string"
                    }
                }
            },
            "Checksums": {
                "title": "Checksums",
                "required": [
                    "checksum",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "checksum": {
                        "title": "Checksum",
                        "type": "string",
                        "description": "The hex-string encoded checksum for the data"
                    },
                    "type": {
                        "title": "Type",
                        "type": "string",
                        "description": "The digest method used to create the checksum. The         value (e.g. ```sha-256```) SHOULD be listed as ```Hash Name String``` in the         https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry].         Other values MAY be used, as long as implementors are aware of the issues         discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].         GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.         Until then, if implementors do choose such an algorithm (e.g. because it's implemented by their storage provider),         they SHOULD use an existing standard ```type``` value such as ```md5```, ```etag```, ```crc32c```, ```trunc512```, or ```sha1```."
                    }
                }
            },
            "ContentsExpanded": {
                "title": "ContentsExpanded",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "A name declared by the bundle author that must be used when materialising this object,         overriding any name directly associated with the object itself.         The name must be unique with the containing bundle.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames]."
                    },
                    "id": {
                        "title": "Id",
                        "type": "string",
                        "description": "A DRS identifier of a ```DrsObject``` (either a single blob or a nested bundle).         If this ```ContentsObject``` is an object within a nested bundle, then the id is optional.         Otherwise, the id is required."
                    },
                    "drs_uri": {
                        "title": "Drs Uri",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of full DRS identifier URI paths that may be used to obtain the object.         These URIs may be external to this DRS instance.",
                        "default": []
                    },
                    "contents": {
                        "title": "Contents",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If this ContentsObject describes a nested bundle and the caller specified \"?expand=true\" on the request,         then this contents array must be present and describe the objects within the nested bundle.",
                        "default": []
                    }
                }
            },
            "DrsObject": {
                "title": "DrsObject",
                "required": [
                    "id",
                    "self_uri",
                    "size",
                    "created_time",
                    "checksums"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string",
                        "description": "An identifier unique to this ```DrsObject```"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "A string that can be used to name a ```DrsObject```.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames]."
                    },
                    "self_uri": {
                        "title": "Self Uri",
                        "type": "string",
                        "description": "A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object.         The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.         For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI,         the ```self_uri``` presents you with a hostname and properly encoded DRS ID for use in subsequent ```access``` endpoint calls."
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "description": "For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the contents field."
                    },
                    "created_time": {
                        "title": "Created Time",
                        "type": "string",
                        "description": "Timestamp of content creation in RFC3339. (This is the creation time of the underlying content, not of the JSON object.)"
                    },
                    "updated_time": {
                        "title": "Updated Time",
                        "type": "string",
                        "description": "Timestamp of content update in RFC3339, identical to ```created_time``` in systems that do not support updates.         (This is the update time of the underlying content, not of the JSON object.)"
                    },
                    "version": {
                        "title": "Version",
                        "type": "string",
                        "description": "A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)"
                    },
                    "mime_type": {
                        "title": "Mime Type",
                        "type": "string",
                        "description": "A string providing the mime-type of the ```DrsObject```."
                    },
                    "checksums": {
                        "title": "Checksums",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Checksums"
                            }
                        ],
                        "description": "The checksum of the ```DrsObject```. At least one checksum must be provided.         For blobs, the checksum is computed over the bytes in the blob.         For bundles, the checksum is computed over a sorted concatenation of the checksums of its         top-level contained objects (not recursive, names not included).         The list of checksums is sorted alphabetically (hex-code) before concatenation         and a further checksum is performed on the concatenated checksum value.         For example, if a bundle contains blobs with the following checksums:         md5(blob1) = 72794b6d md5(blob2) = 5e089d29 Then the checksum of the bundle is:         md5( concat( sort( md5(blob1), md5(blob2) ) ) ) = md5( concat( sort( 72794b6d, 5e089d29 ) ) ) =         md5( concat( 5e089d29, 72794b6d ) ) = md5( 5e089d2972794b6d ) = f7a29a04"
                    },
                    "access_methods": {
                        "title": "Access Methods",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AccessMethods"
                            }
                        ],
                        "description": "The list of access methods that can be used to fetch the ```DrsObject```. Required for single blobs; optional for bundles."
                    },
                    "contents": {
                        "title": "Contents",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ContentsExpanded"
                            }
                        ],
                        "description": "If not set, this ```DrsObject``` is a single blob. If set, this ```DrsObject``` is a bundle containing         the listed ```ContentsObject``` s (some of which may be further nested)."
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "A human readable description of the ```DrsObject```."
                    },
                    "aliases": {
                        "title": "Aliases",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of strings that can be used to find other metadata about this ```DrsObject``` from external metadata sources.         These aliases can be used to represent secondary accession numbers or external GUIDs.",
                        "default": []
                    }
                },
                "example": {
                    "id": "0eaa2648-8ff6-11ec-b909-0242ac120002",
                    "name": "test_name",
                    "self_uri": "drs://drs.example.org/314159",
                    "size": 0,
                    "created_time": "2019-08-24T14:15:22Z",
                    "updated_time": "2019-08-24T14:15:22Z",
                    "version": "string",
                    "mime_type": "application/json",
                    "checksums": {
                        "checksum": "string",
                        "type": "sha-256"
                    },
                    "access_methods": {
                        "type": "s3",
                        "access_url": {
                            "url": "http://sequencing7.172.21.0.1:9000/NVQ_RUN_236/D2019808/D2019808-ready.cram",
                            "headers": [
                                "Authorization: Basic Z2E0Z2g6ZHJz"
                            ]
                        },
                        "access_id": "string",
                        "region": "us-east-1"
                    },
                    "contents": {
                        "name": "string",
                        "id": "0eaa2648-8ff6-11ec-b909-0242ac120002",
                        "drs_uri": [
                            "drs://drs.example.org/314159"
                        ],
                        "contents": [
                            "list",
                            "of",
                            "contents"
                        ]
                    },
                    "description": "string",
                    "aliases": [
                        "NVQ_RUN_236/example"
                    ]
                }
            },
            "Error": {
                "title": "Error",
                "required": [
                    "status_code"
                ],
                "type": "object",
                "properties": {
                    "msg": {
                        "title": "Msg",
                        "type": "string",
                        "description": "A detailed error message."
                    },
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer",
                        "description": "The integer representing the HTTP status code (e.g. 200, 404)."
                    }
                },
                "status_code": 0,
                "msg": "string"
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "Token": {
                "title": "Token",
                "required": [
                    "access_token",
                    "token_type",
                    "expires_in"
                ],
                "type": "object",
                "properties": {
                    "access_token": {
                        "title": "Access Token",
                        "type": "string"
                    },
                    "token_type": {
                        "title": "Token Type",
                        "type": "string"
                    },
                    "expires_in": {
                        "title": "Expires In",
                        "type": "integer"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "OAuth2PasswordBearer": {
                "in": "header",
                "type": "apiKey",
                "name": "Authorization"
              }
        }
    }
}